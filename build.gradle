
buildscript {
    ext.shadowJarVersion = "1.2.3"
    ext.kotlinVersion = '1.3.50'
    ext.keplinVersion = '1.0.1'
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadowJarVersion"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        jcenter()
        mavenCentral()
//         only when using Kotlin EAP releases ...
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        testCompile 'junit:junit:4.12'
    }

    version = '0.6.0'

    ext.installPath = project.hasProperty('installPath') ? project.getProperty('installPath') : "${System.properties['user.home']}/.ipython/kernels/kotlin"

    ext.debugSpecs = false
}

apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    deploy
}

dependencies {
    compile project(":jupyter-lib")
    compile "org.jetbrains.kotlin:kotlin-scripting-jvm-host-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-common:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-script-util:$kotlinVersion"

    compile "org.apache.maven:maven-core:3.0.3"
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.zeromq:jeromq:0.3.5'
    compile 'com.beust:klaxon:2.1.8'
    compile "com.jcabi:jcabi-aether:0.10.1"
    runtime 'org.slf4j:slf4j-simple:1.7.25'

    shadow "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    shadow "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
    shadow "org.jetbrains.kotlin:kotlin-script-util:$kotlinVersion"
    shadow "org.jetbrains.kotlin:kotlin-scripting-jvm-host-embeddable:$kotlinVersion"
    shadow "org.jetbrains.kotlin:kotlin-scripting-common:$kotlinVersion"
    shadow "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlinVersion"
    shadow project(":jupyter-lib")

    deploy "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    deploy "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
    deploy "org.jetbrains.kotlin:kotlin-script-util:$kotlinVersion"
    deploy "org.jetbrains.kotlin:kotlin-scripting-jvm-host-embeddable:$kotlinVersion"
    deploy "org.jetbrains.kotlin:kotlin-scripting-common:$kotlinVersion"
    deploy "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:$kotlinVersion"
    deploy project(":jupyter-lib")
}

jar.manifest.attributes(
    'Main-class': 'org.jetbrains.kotlin.jupyter.IkotlinKt',
    'Implementation-Version': version
)

tasks.withType(AbstractCompile) {
    classpath += configurations.shadow
}

shadowJar {
    baseName = 'kotlin-jupyter-kernel'
    classifier = ''
    mergeServiceFiles()
    dependencies {
        exclude(dependency("org.jetbrains.kotlin:.*:.*"))
    }
}

task cleanInstallDir(){
    doLast {
        File installDir = new File("$installPath")
        installDir.deleteDir()
    }
}

task installKernel(type: Copy, dependsOn: [cleanInstallDir, shadowJar]) {
    from shadowJar.outputs
    into installPath
}

task createSpecs(dependsOn: cleanInstallDir) {
    doLast {
        String fileName = debugSpecs ? "kernel-debug" : "kernel"
        String spec = new File("kernelspec/${fileName}.json.template").getText('UTF-8')
        File kernelFile = files { shadowJar }.singleFile
        spec = spec.replace("\${KERNEL_JAR_PATH}", "$installPath/${kernelFile.name}")
        String libsCp = files { configurations.deploy }.files.collect {
            "$installPath/${it.name}"
        } .join(File.pathSeparator)
        spec = spec.replace("\${RUNTIME_CLASSPATH}", libsCp)
        File installDir = new File("$installPath")
        if (!installDir.exists()) {
            installDir.mkdirs();
        }
        new File("$installPath/kernel.json").write(spec, 'UTF-8')
    }
}

task installLibs(type: Copy, dependsOn: cleanInstallDir) {
    into "$installPath"
    from configurations.deploy
}

task install(dependsOn: [installKernel, installLibs, createSpecs]){
}